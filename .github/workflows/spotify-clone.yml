name: DevSecOps Spotify Clone CI/CD

on:
  push:
    branches: [main, dev]
  pull_request:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      REGISTRY: ghcr.io
      FRONTEND_IMAGE: ghcr.io/ygoncloud/spotify-frontend:latest
      BACKEND_IMAGE: ghcr.io/ygoncloud/spotify-backend:latest
      NAMESPACE: spotify-clone

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 18

    - name: Install frontend deps
      working-directory: ./frontend
      run: npm ci

    - name: Install backend deps
      working-directory: ./backend
      run: npm ci

    - name: Semgrep scan
      uses: returntocorp/semgrep-action@v1
      with:
        config: auto
    - name: SonarQube scan
      uses: SonarSource/sonarqube-scan-action@master
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        projectBaseDir: ./

    - name: Dependency Audit (frontend)
      working-directory: ./frontend
      run: npm audit --audit-level=high || true

    - name: Dependency Audit (backend)
      working-directory: ./backend
      run: npm audit --audit-level=high || true

    - name: Log in to GitHub Container Registry
      run: echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u ygoncloud --password-stdin

    - name: Build frontend image
      run: docker build -t $FRONTEND_IMAGE ./frontend

    - name: Build backend image
      run: docker build -t $BACKEND_IMAGE ./backend

    - name: Trivy scan (frontend)
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.FRONTEND_IMAGE }}
        format: table
        exit-code: 0
        skip-cache: true

    - name: Trivy scan (backend)
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.BACKEND_IMAGE }}
        format: table
        exit-code: 0
        skip-cache: true

    - name: Push frontend image
      run: docker push $FRONTEND_IMAGE

    - name: Push backend image
      run: docker push $BACKEND_IMAGE

    - name: Render Helm Templates (simulate deployments)
      run: |
        helm template spotify-clone ./k8s/chart/spotify-clone \
          --set image.frontend=$FRONTEND_IMAGE \
          --set image.backend=$BACKEND_IMAGE > simulated-deployment.yaml
        cat simulated-deployment.yaml

    - name: Deploy to Kubernetes
      run: |
        kubectl apply -f ./k8s/backend-deployment.yaml
        kubectl apply -f ./k8s/frontend-deployment.yaml
        kubectl apply -f ./k8s/ingress.yaml

    - name: Install Monitoring
      run: |
        helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
        helm repo add grafana https://grafana.github.io/helm-charts
        helm repo update
        helm upgrade --install prometheus prometheus-community/prometheus --namespace monitoring --create-namespace
        helm upgrade --install grafana grafana/grafana --namespace monitoring --create-namespace \
          --set adminPassword=${{ secrets.GRAFANA_ADMIN_PASSWORD }}

    - name: Install Falco
      run: |
        helm repo add falcosecurity https://falcosecurity.github.io/helm-charts
        helm repo update
        helm upgrade --install falco falcosecurity/falco --namespace security --create-namespace

    - name: Install OPA Gatekeeper
      run:
        helm repo add gatekeeper https://open-policy-agent.github.io/gatekeeper/charts
        helm repo update
        helm upgrade --install gatekeeper gatekeeper/gatekeeper --namespace gatekeeper-system --create-namespace
        kubectl apply -f ./k8s/security/constraint-templates/disallow-privileged.yaml
        kubectl apply -f ./k8s/security/constraint/disallow-privileged-pods.yaml



